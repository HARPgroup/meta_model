#!/bin/csh
if (${#argv} < 3) then
  echo "Use: run_model model_name scenario_name segment_id [module=all,land,river] [step=all,prep,run,link,analyze] [plugin=all,01_...]"
  echo "Environment Variables:"
  echo "  - MODEL_ROOT (required): the full path to the model executable."
  echo "  - IGNORE_PROBLEMS (0/1 optional): Proceed regardless of errors, i.e. ignore 'problem' file creation."
  exit
endif

# @todo: dynamically find meta_model_root, i.e., this code base
if (! $?META_MODEL_ROOT ) then
  set META_MODEL_ROOT="/opt/model/meta_model"
endif
set IGNORE_PROBLEMS = 0

# Get params from command arguments
# and set up list of modules and steps to run
source $META_MODEL_ROOT/model_get_args
echo $run_steps

# set a couple defaults that can e overriden by the model
set all_modules = ( land river )
set all_run_steps = ( prep run link analyze )

# Load meta-model configuration
if ( -f $META_MODEL_ROOT/models/$model/model_config ) then
  echo "Calling model_config with modules = $modules"
  source $META_MODEL_ROOT/models/$model/model_config
else 
  echo "Error: Can not find model configuration file $META_MODEL_ROOT/models/$model/model_config"
  echo "Exiting"
  exit
endif
if ( $modules == "all" ) then
  set modules = ( $all_modules )
endif
if ( $run_steps == "all" ) then
  set run_steps = ( $all_run_steps )
endif


echo "Beginning Run model=$model, scenario=$scenario, segment=$segment, work_path=$work_path, modules=$modules, run_steps=$run_steps,script=$script"
install -d $work_path # insure that the work directory is in place
# todo: set up places to look for plugins in various trees such as MODEL_ROOT
set model_plugins=$META_MODEL_ROOT/models/$model
setenv MODEL_ROOT "$MODEL_ROOT"
setenv MODEL_BIN "$MODEL_BIN"
setenv META_MODEL_ROOT "$META_MODEL_ROOT"
setenv SCRIPT_DIR "$SCRIPT_DIR"
echo "setting MODEL to $model"
setenv MODEL "$model"
setenv START_YEAR "$START_YEAR"
setenv END_YEAR "$END_YEAR"
setenv modules "$modules" # makes it available to sourced scripts
# iterate through different component of the model execution cycle
if ( -d $model_plugins ) then
  foreach module ( $modules )
    # todo: put checks in to see if this module is enabled in the run
    foreach step ( $run_steps )
      set script_path = "$model_plugins/$module/$step"
      if ( -d $script_path ) then 
        if ( $script  == "all" ) then
          set plugins = `ls $script_path`
        else 
          set plugins = `ls $script_path/*$script*`
        endif
        if ( $cleanup == 0 ) then
          # override cleanup
        else
          # use logic to guess cleanup
          if ( $script  == "all" ) then
            set cleanup = 1 # normal run, remove temp dir afterwards if completes OK
          else 
            set cleanup = 0 # step by step run, do not remove temp dir afterwards
          endif
        endif
        if ( ! ( "$plugins" == "" ) ) then
          foreach plugin ( $plugins ) 
            # in case we had a wildcard match script passed in
            # we insure just the base name here. if it is already basename form
            # it will return un-changed
            set plugin = `basename $plugin` 
            echo "Running: $model_plugins/$module/$step/$plugin $scenario $segment $work_path"
            $model_plugins/$module/$step/$plugin $scenario $segment $work_path
            if ( -f $work_path/problem ) then
              if ( ! ( $IGNORE_PROBLEMS ) ) then
                echo "Error: Problem found in step $model => $module / $step / $plugin "
                echo "       See $work_path/problem "
                exit
              else 
                mv $work_path/problem $work_path/problem.${step}.${plugin}
                echo "Warning: Problem found in step $model => $module / $step / $plugin "
                echo "         Continuing, though this should be checked. "
                echo "         See $work_path/problem.${step}.${plugin}"
              endif
            endif
          end
        else 
          echo "No model plugins found in $model_plugins/$module/$step/"
        endif
      else
        echo "No step $step found in $model/$module"
      endif
    end
  end
  if ( -f $work_path/problem ) then
    continue
  else
    echo "Model run for $segment / $scenario completed without errors."
    if ( $cleanup == 1 ) then
      if ( "$work_path" == "" ) then
        echo "Work path $work_path is unset, cannot remove files"
      else
        echo "Removing work path $work_path"
        rm -Rf $work_path
      endif
    else
      echo "Model cleanup NOT performed.  You will need to manually remove emp dir $work_path"
    endif 
  endif
else
  echo "No model definitions found for model type $model in $META_MODEL_ROOT/models"
endif
