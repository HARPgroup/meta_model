#!/bin/bash
# loads the args, the raster specific config and change to temp dir
geo_config=`find_config geo.config`
if [ "$geo_config" = "" ]; then
  geo_config="$META_MODEL_ROOT/models/raster_met/geo/geo.config"
fi
. $geo_config

ts_START_DATE=`date -d "${START_DATE}" +'%Y-%m-%d'`
ts_END_DATE=`date -d "${END_DATE}" +'%Y-%m-%d'`

#NLDAS end time is set different between simple_lm and storm_vol
if [ "$MET_DATA_SOURCE" = "nldas2" ]; then
	if [[ "$GEO_MET_MODEL" = "simple_lm" ]]; then
	ts_END_DATE=`date --date "$ts_END_DATE - 1 day" +'%Y-%m-%d'`
	fi
fi

#Establish and insert best-fit ratings. Delete existing ratings as needed.
#Note that the ratings are expanded to a daily time series using generate_series and
#date casts as appropriate in dailyRatings as defined in WITH
#Dates are converted back to the appropriate timestamp using a timsestamptz cast in bestRating
#Finally, to ensure proper integer format, timestamps are cast to bigint in the insert statement to dh_timeseries
ratings_sql="
\\set ratingsVarkey '$RATINGS_VARKEY' \n
\\set scenarioPropName '$RANKING_SCENARIO' \n
\\set hydrocode  '$coverage' \n
\\set metModel '$MET_MODEL_VERSION' \n
\\set bundle '$COVERAGE_BUNDLE'   \n
\\set ftype '$COVERAGE_FTYPE'  \n
\\set defaultvarkey '$BACKGROUND_VARKEY'
SELECT hydroid AS ratings FROM dh_variabledefinition WHERE varkey = :'ratingsVarkey' \\gset \n
SELECT scen.pid as scenariopid \n
FROM dh_properties as scen \n
LEFT JOIN dh_properties as model \n
ON model.pid =  scen.featureid \n
LEFT JOIN dh_feature as feat \n
on feat.hydroid = model.featureid \n
WHERE feat.hydrocode = :'hydrocode'  \n
AND feat.bundle = '$COVERAGE_BUNDLE'  \n
and feat.ftype = '$COVERAGE_FTYPE' \n
and scen.propname = :'scenarioPropName' \\gset \n
SELECT hydroid as defaultvarid from dh_variabledefinition as v  \n
WHERE v.varkey = :'defaultvarkey' \\gset
\n
DELETE FROM dh_timeseries \n
WHERE varid = :ratings  \n
AND entity_type = 'dh_properties' \n
AND featureid = :scenariopid; \n
\n

WITH usgs_features AS (   \n
	SELECT f.hydroid   \n
	FROM dh_feature as f   \n
	WHERE f.hydrocode = :'hydrocode'   \n
		AND f.bundle = :'bundle'   \n
		AND f.ftype = :'ftype'   \n
)   \n
,dailyRating as ( \n
	SELECT f.hydroid as featureid,  \n
	CASE  \n
	WHEN ts.tsvalue IS NOT NULL THEN ts.hydroid  \n
	ELSE NULL  \n
	END as scenPropVarID,  \n
	basets.START_DATE,  \n
	basets.END_DATE,  \n
	ts.tsvalue as tsvalue  \n
	FROM usgs_features as f \n
	LEFT JOIN ( \n
		SELECT generate_series(extract(epoch from '${ts_START_DATE} 00:00:00'::timestamptz), \n
				extract(epoch from '${ts_END_DATE} 00:00:00'::timestamptz), 86400) as START_DATE, \n
			generate_series(extract(epoch from '${ts_START_DATE} 23:59:59'::timestamptz),  \n
				extract(epoch from '${ts_END_DATE} 23:59:59 UTC'::timestamptz), 86400) as END_DATE \n
	) as basets \n
	ON 1 = 1
	LEFT JOIN ( \n
		 SELECT modelProp.featureid as featureid,    \n
		 ts.tstime,ts.tsendtime, ts.varid,   \n
		 ts.tsvalue,    \n
		 scenPropVarDef.hydroid    \n
		 FROM dh_timeseries as ts    \n
		 LEFT JOIN dh_properties as scenProp    \n
		 ON ts.featureid = scenProp.pid    \n
		 LEFT JOIN dh_properties as modelProp    \n
		 ON scenProp.featureid = modelProp.pid    \n
		 LEFT JOIN dh_properties as scenVarProp    \n
		 ON scenVarProp.featureid = scenProp.pid    \n
		 LEFT JOIN dh_variabledefinition as scenPropVarDef    \n
		 ON scenVarProp.propcode = scenPropVarDef.varkey    \n
		 LEFT JOIN dh_variabledefinition as scenVarDef    \n
		 ON scenVarProp.varid = scenVarDef.hydroid    \n
		WHERE modelProp.propcode = :'metModel' \n
		AND scenProp.propname IN (${SCENARIOS_TO_RANK}) \n
		AND scenVarProp.propname = 'Met Data Varkey' \n
		AND scenVarDef.varkey = 'spatial_data_source' \n
	) as ts \n
	ON ( \n 
		ts.featureid = f.hydroid AND
		basets.START_DATE >= ts.tstime AND \n 
		basets.END_DATE <= ts.tsendtime \n 
	) \n
	ORDER BY basets.START_DATE \n	
), \n
maxRating AS ( \n
	 SELECT featureid as featureid,   \n
	 START_DATE as START_DATE,   \n
	 END_DATE as END_DATE,   \n
	 max(tsvalue) as maxtsvalue   \n
	 FROM dailyRating   \n
	 GROUP BY featureid, START_DATE, END_DATE   \n
), \n
bestRating AS ( \n
	SELECT dailyRating.featureid AS featureid,      \n
	dailyRating.START_DATE as tstime,      \n
	dailyRating.END_DATE as tsendtime,      \n
	CASE WHEN count(dailyRating.scenPropVarID) > 1     \n
		THEN :defaultvarid     \n
		ELSE max(dailyRating.scenPropVarID)     \n
	END as tsvalue     \n
	FROM dailyRating      \n
	INNER JOIN maxRating      \n
	ON dailyRating.START_DATE = maxRating.START_DATE      \n
	AND dailyRating.END_DATE = maxRating.END_DATE      \n
	AND (dailyRating.tsvalue = maxRating.maxtsvalue OR      \n
		maxRating.maxtsvalue IS NULL)      \n
	AND (dailyRating.featureid = maxRating.featureid OR      \n
		maxRating.maxtsvalue IS NULL)      \n
	GROUP BY dailyRating.featureid, dailyRating.START_DATE,      \n
		dailyRating.END_DATE     \n
		ORDER BY dailyRating.featureid,dailyRating.START_DATE      \n
) \n
 \n
INSERT INTO dh_timeseries ( tstime,tsendtime, tsvalue, featureid, varid, entity_type ) \n
SELECT a.tstime::bigint, a.tsendtime::bigint, a.tsvalue, \n
 :scenariopid as featureid, \n
 :ratings as varid, \n
 'dh_properties' AS entity_type \n
FROM bestRating AS a \n
"

# turn off the expansion of the asterisk
set -f
#Delete previous dh_timeseries entries
echo "Writing sql insert to $RATINGS_SQL_FILE"
echo $ratings_sql
echo -e $ratings_sql > $RATINGS_SQL_FILE 
cat $RATINGS_SQL_FILE | psql -h $db_host $db_name
echo "Finshed running query."
