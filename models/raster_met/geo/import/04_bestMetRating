#!/bin/bash
# loads the args, the raster specific config and change to temp dir
geo_config=`find_config geo.config`
if [ "$geo_config" = "" ]; then
  geo_config="$META_MODEL_ROOT/models/raster_met/geo/geo.config"
fi
. $geo_config

#Put the base model timseries onto dbase2. This will be used to convert the ratings to daily
baseFileName=`basename $COVERAGE_PRECIP_FILE`
echo "sftp $db_host:/tmp/ <<< put ${DAILY_PRECIP_FILE}"
sftp $db_host:"/tmp/" <<< "put ${DAILY_PRECIP_FILE}"
echo "File put on ${db_host}, now inserting files..."

#Establish and insert best-fit ratings. Delete existing ratings as needed.
ratings_sql="
\\set ratingsVarkey '$RATINGS_VARKEY' \n
\\set scenarioPropName '$RANKING_SCENARIO' \n
\\set hydrocode  '$coverage' \n
\\set metModel '$MET_MODEL_VERSION' \n
SELECT hydroid AS ratings FROM dh_variabledefinition WHERE varkey = :'ratingsVarkey' \\gset \n
SELECT scen.pid as scenariopid \n
FROM dh_properties as scen \n
LEFT JOIN dh_properties as model \n
ON model.pid =  scen.featureid \n
LEFT JOIN dh_feature as feat \n
on feat.hydroid = model.featureid \n
WHERE feat.hydrocode = :'hydrocode'  \n
AND feat.bundle = '$COVERAGE_BUNDLE'  \n
and feat.ftype = '$COVERAGE_FTYPE' \n
and scen.propname = :'scenarioPropName' \\gset \n
 \n
CREATE TEMPORARY TABLE tmp_baseTS (
  obs_date DATE,
  precip_in float8,
  yr int,
  mo int,
  da int,
  wk int,
  obs_flow float8,
  area_sqmi float8,
  precip_cfs float8
);

COPY tmp_ratings FROM '/tmp/${tmp_baseTS}' with csv header NULL AS 'NA';
 
\n 
DELETE FROM dh_timeseries \n
WHERE varid = :ratings  \n
AND entity_type = 'dh_properties' \n
AND featureid = :scenariopid; \n
 \n
WITH maxRating AS ( \n
	SELECT modelProp.featureid as featureid, \n
		ts.tstime as tstime, \n
		ts.tsendtime as tsendtime, \n
		max(ts.tsvalue) as maxtsvalue \n
	FROM dh_properties as modelProp \n
	LEFT JOIN dh_properties as scenProp \n
		ON scenProp.featureid = modelProp.pid \n
	LEFT JOIN dh_timeseries as ts \n
		ON ts.featureid = scenProp.pid \n
	WHERE modelProp.propcode = :'metModel' \n
		AND scenProp.propname IN (${SCENARIOS_TO_RANK}) \n
		AND ts.featureid = :scenariopid \n
	GROUP BY modelProp.featureid, \n
		ts.tstime, \n
		ts.tsendtime \n
), \n
bestRating AS ( \n
	SELECT modelProp.featureid AS featureid, \n
		ts.tstime as tstime, \n
		ts.tsendtime as tsendtime, \n
		scenProp.pid as tsvalue, \n
		ts.varid  \n
	FROM dh_properties as modelProp \n
	LEFT JOIN dh_properties as scenProp \n
	ON scenProp.featureid = modelProp.pid \n
	LEFT JOIN dh_timeseries as ts \n
	ON ts.featureid = scenProp.pid \n
	INNER JOIN maxRating \n
	ON ts.tstime = maxRating.tstime \n
	AND ts.tsendtime = maxRating.tsendtime \n
	AND ts.tsvalue = maxRating.maxtsvalue \n
	AND modelProp.featureid = maxRating.featureid \n
	WHERE modelProp.propcode = :'metModel' \n
		AND scenProp.propname IN (${SCENARIOS_TO_RANK}) \n
		AND ts.featureid = :scenariopid \n
  ORDER BY modelProp.featureid,ts.tstime \n
) \n
 \n
INSERT INTO dh_timeseries ( tstime,tsendtime, tsvalue, featureid, varid, entity_type ) \n
SELECT a.tstime, a.tsendtime, a.tsvalue, \n
 :scenariopid as featureid, \n
 :ratings as varid, \n
 'dh_properties' AS entity_type \n
FROM bestRating AS a
"

# turn off the expansion of the asterisk
set -f
#Delete previous dh_timeseries entries
echo "Writing sql insert to $RATINGS_SQL_FILE"
echo $ratings_sql
echo -e $ratings_sql > $RATINGS_SQL_FILE 
#cat $RATINGS_SQL_FILE | psql -h $db_host $db_name
echo "Finshed running query."
