#!/bin/bash
# loads the args, the raster specific config and change to temp dir
geo_config=`find_config geo.config`
if [ "$geo_config" = "" ]; then
  geo_config="$META_MODEL_ROOT/models/raster_met/geo/geo.config"
fi
. $geo_config

ts_START_DATE=`date -d "${START_DATE}" +'%Y-%m-%d'`
ts_END_DATE=`date -d "${END_DATE}" +'%Y-%m-%d'`

#NLDAS end time is set different between simple_lm and storm_vol
if [ "$MET_DATA_SOURCE" = "nldas2" ]; then
	if [[ "$GEO_MET_MODEL" = "simple_lm" ]]; then
	ts_END_DATE=`date --date "$ts_END_DATE - 1 day" +'%Y-%m-%d'`
	fi
fi

#Establish and insert best-fit ratings. Delete existing ratings as needed.
#Note that the ratings are expanded to a daily time series using generate_series and
#date casts as appropriate in dailyRatings as defined in WITH
#Dates are converted back to the appropriate timestamp using a timsestamptz cast in bestRating
#Finally, to ensure proper integer format, timestamps are cast to bigint in the insert statement to dh_timeseries
ratings_sql="
\\set ratingsVarkey '$RATINGS_VARKEY' \n
\\set scenarioPropName '$RANKING_SCENARIO' \n
\\set hydrocode  '$coverage' \n
\\set metModel '$MET_MODEL_VERSION' \n
\\set bundle '$COVERAGE_BUNDLE'   \n
\\set ftype '$COVERAGE_FTYPE'  \n
\\set defaultvarkey '$BACKGROUND_VARKEY'  \n
SELECT hydroid AS ratings FROM dh_variabledefinition WHERE varkey = :'ratingsVarkey' \\gset \n
SELECT scen.pid as scenariopid \n
FROM dh_properties as scen \n
LEFT JOIN dh_properties as model \n
ON model.pid =  scen.featureid \n
LEFT JOIN dh_feature as feat \n
on feat.hydroid = model.featureid \n
WHERE feat.hydrocode = :'hydrocode'  \n
AND feat.bundle = '$COVERAGE_BUNDLE'  \n
and feat.ftype = '$COVERAGE_FTYPE' \n
and scen.propname = :'scenarioPropName' \\gset \n
SELECT hydroid as defaultvarid from dh_variabledefinition as v  \n
WHERE v.varkey = :'defaultvarkey' \\gset
\n
DELETE FROM dh_timeseries \n
WHERE varid = :ratings  \n
AND entity_type = 'dh_properties' \n
AND featureid = :scenariopid; \n
\n

WITH usgs_features AS (
SELECT f.hydroid
FROM dh_feature as f
WHERE f.hydrocode = :'hydrocode'
AND f.bundle = :'bundle'
AND f.ftype = :'ftype'
)
,dailyRating as ( 
	 SELECT f.hydroid as featureid, 
	 CASE 
	 WHEN ts.tsvalue IS NOT NULL THEN ts.hydroid 
	 ELSE NULL 
	 END as scenPropVarID, 
	 basets.START_DATE, 
	 basets.END_DATE, 
	 ts.tsvalue as tsvalue 
	 FROM usgs_features as f
	 LEFT JOIN ( 
		SELECT generate_series(extract(epoch from '${ts_START_DATE} 00:00:00'::timestamptz), 
		extract(epoch from '${ts_END_DATE} 00:00:00'::timestamptz), 86400) as START_DATE, 
		generate_series(extract(epoch from '${ts_START_DATE} 23:59:59'::timestamptz), 
		extract(epoch from '${ts_END_DATE} 23:59:59'::timestamptz), 86400) as END_DATE 
	 ) as basets 
	 ON 1 = 1
	 LEFT JOIN ( 
		 SELECT modelProp.featureid as featureid, 
		 ts.tstime,ts.tsendtime, ts.varid,
		 ts.tsvalue, 
		 scenPropVarDef.hydroid 
		 FROM dh_timeseries as ts 
		 LEFT JOIN dh_properties as scenProp 
		 ON ts.featureid = scenProp.pid 
		 LEFT JOIN dh_properties as modelProp 
		 ON scenProp.featureid = modelProp.pid 
		 LEFT JOIN dh_properties as scenVarProp 
		 ON scenVarProp.featureid = scenProp.pid 
		 LEFT JOIN dh_variabledefinition as scenPropVarDef 
		 ON scenVarProp.propcode = scenPropVarDef.varkey 
		 LEFT JOIN dh_variabledefinition as scenVarDef 
		 ON scenVarProp.varid = scenVarDef.hydroid 
		 WHERE modelProp.propcode = :'metModel' 
		 AND scenProp.propname IN (${SCENARIOS_TO_RANK}) 
		 AND scenVarProp.propname = 'Met Data Varkey' 
		 AND scenVarDef.varkey = 'spatial_data_source' 
	 ) as ts 
	 ON ( 
	 ts.featureid = f.hydroid AND
	 basets.START_DATE >= ts.tstime AND 
	 basets.END_DATE <= ts.tsendtime 
	 ) 
	 ORDER BY basets.START_DATE 
 )
 , maxRating AS ( 
	 SELECT featureid as featureid, 
	 START_DATE as START_DATE, 
	 END_DATE as END_DATE, 
	 max(tsvalue) as maxtsvalue 
	 FROM dailyRating 
	 GROUP BY featureid, START_DATE, END_DATE 
 )
 , bestRating AS ( 
	 SELECT dailyRating.featureid AS featureid, 
	 dailyRating.START_DATE as tstime, 
	 dailyRating.END_DATE as tsendtime, 
	 CASE WHEN count(dailyRating.scenPropVarID) > 1
	 THEN :defaultvarid
	 ELSE max(dailyRating.scenPropVarID)
	 END as tsvalue
	 FROM dailyRating 
	 INNER JOIN maxRating 
	 ON dailyRating.START_DATE = maxRating.START_DATE 
	 AND dailyRating.END_DATE = maxRating.END_DATE 
	 AND (dailyRating.tsvalue = maxRating.maxtsvalue OR 
	 maxRating.maxtsvalue IS NULL) 
	 AND (dailyRating.featureid = maxRating.featureid OR 
	 maxRating.maxtsvalue IS NULL) 
	 GROUP BY dailyRating.featureid, dailyRating.START_DATE, 
	 dailyRating.END_DATE
	 ORDER BY dailyRating.featureid,dailyRating.START_DATE 
 ) 
 
 INSERT INTO dh_timeseries ( tstime,tsendtime, tsvalue, featureid, varid, entity_type ) 
 SELECT a.tstime::bigint, a.tsendtime::bigint, a.tsvalue, 
 :scenariopid as featureid, 
 :ratings as varid, 
 'dh_properties' AS entity_type 
 FROM bestRating AS a 
"

# turn off the expansion of the asterisk
set -f
#Delete previous dh_timeseries entries
echo "Writing sql insert to $RATINGS_SQL_FILE"
echo $ratings_sql
echo -e $ratings_sql > $RATINGS_SQL_FILE 
cat $RATINGS_SQL_FILE | psql -h $db_host $db_name
echo "Finshed running query."
