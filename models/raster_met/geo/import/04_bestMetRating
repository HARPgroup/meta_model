#!/bin/bash
# loads the args, the raster specific config and change to temp dir
geo_config=`find_config geo.config`
if [ "$geo_config" = "" ]; then
  geo_config="$META_MODEL_ROOT/models/raster_met/geo/geo.config"
fi
. $geo_config

#Establish and insert best-fit ratings. Delete existing ratings as needed.
ratings_sql="
\\set ratingsVarkey '$RATINGS_VARKEY' \n
\\set scenarioPropName '$RANKING_SCENARIO' \n
\\set hydrocode  '$coverage' \n
\\set metModel '$MET_MODEL_VERSION' \n
SELECT hydroid AS ratings FROM dh_variabledefinition WHERE varkey = :'ratingsVarkey' \\gset \n
SELECT scen.pid as scenariopid \n
FROM dh_properties as scen \n
LEFT JOIN dh_properties as model \n
ON model.pid =  scen.featureid \n
LEFT JOIN dh_feature as feat \n
on feat.hydroid = model.featureid \n
WHERE feat.hydrocode = :'hydrocode'  \n
AND feat.bundle = '$COVERAGE_BUNDLE'  \n
and feat.ftype = '$COVERAGE_FTYPE' \n
and scen.propname = :'scenarioPropName' \\gset \n
SELECT feat.hydroid as coveragefeatureid \n
FROM dh_properties as scen \n
LEFT JOIN dh_properties as model \n
ON model.pid =  scen.featureid \n
LEFT JOIN dh_feature as feat \n
on feat.hydroid = model.featureid \n
WHERE feat.hydrocode = :'hydrocode'  \n
AND feat.bundle = '$COVERAGE_BUNDLE'  \n
and feat.ftype = '$COVERAGE_FTYPE' \n
and scen.propname = :'scenarioPropName' \\gset \n
\n
DELETE FROM dh_timeseries \n
WHERE varid = :ratings  \n
AND entity_type = 'dh_properties' \n
AND featureid = :scenariopid; \n
\n
WITH dailyRating as (
	SELECT modelProp.featureid as featureid, \n
		scenProp.pid, \n
		tsrast.tstime as tstime, \n
		tsrast.tsendtime as tsendtime, \n
		ts.tsvalue as tsvalue \n
	FROM dh_properties as modelProp \n
	LEFT JOIN dh_properties as scenProp \n
	ON scenProp.featureid = modelProp.pid \n
	LEFT JOIN dh_timeseries as ts \n
	ON ts.featureid = scenProp.pid \n
	RIGHT JOIN ( \n
		SELECT tsrast.tstime,tsrast.tsendtime \n
		FROM dh_timeseries_weather as tsrast \n
		LEFT JOIN dh_variabledefinition as v \n
		ON v.hydroid = tsrast.varid \n
		WHERE v.varkey = 'prism_mod_daily' \n
		AND to_timestamp(tstime) >= ${START_DATE} \n
		AND to_timestamp(tsendtime) <= ${END_DATE} \n
	) as tsrast \n
	ON tsrast.tstime >= ts.tstime \n
	AND tsrast.tsendtime < ts.tsendtime \n
	WHERE modelProp.propcode = :'metModel' \n
		AND scenProp.propname IN (${SCENARIOS_TO_RANK}) \n
		AND modelProp.featureid = :coveragefeatureid \n
), \n
maxRating AS ( \n
	SELECT modelProp.featureid as featureid, \n
		tstime as tstime, \n
		tsendtime as tsendtime, \n
		max(ts.tsvalue) as maxtsvalue \n
	FROM dailyRating
	GROUP BY tstime, \n
		tsendtime \n
), \n
bestRating AS ( \n
	SELECT dailyRating.featureid AS featureid, \n
		dailyRating.tstime as tstime, \n
		dailyRating.tsendtime as tsendtime, \n
		dailyRating.pid as tsvalue \n
	FROM dailyRating \n
	INNER JOIN maxRating \n
		ON dailyRating.tstime = maxRating.tstime \n
		AND dailyRating.tsendtime = maxRating.tsendtime \n
		AND dailyRating.tsvalue = maxRating.maxtsvalue \n
		AND dailyRating.featureid = maxRating.featureid \n
	WHERE maxRating IS NOT NULL
  ORDER BY modelProp.featureid,dailyRating.tstime \n
) \n
 \n
INSERT INTO dh_timeseries ( tstime,tsendtime, tsvalue, featureid, varid, entity_type ) \n
SELECT a.tstime, a.tsendtime, a.tsvalue, \n
 :scenariopid as featureid, \n
 :ratings as varid, \n
 'dh_properties' AS entity_type \n
FROM bestRating AS a \n
"

# turn off the expansion of the asterisk
set -f
#Delete previous dh_timeseries entries
echo "Writing sql insert to $RATINGS_SQL_FILE"
echo $ratings_sql
echo -e $ratings_sql > $RATINGS_SQL_FILE 
#cat $RATINGS_SQL_FILE | psql -h $db_host $db_name
echo "Finshed running query."
