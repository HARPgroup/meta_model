#!/bin/bash
if [ -z "$scenario" ]; then 
   # try to get from cmd args
   scenario=$1
   ddate=$2
   tempdir=$3
fi
export scenario ddate tempdir

if [ -z "$scenario" ]; then 
  echo "Error: missing Arguments."
  echo "Script must be called as: 'script_name scenario date [temp dir]'"
  echo "Ex: $0 PRISM 2020-01-18"
  exit
fi

# Need date. Met runs on a single day basis and user must supply date.
if [ -z ${ddate+x} ]; then 
  echo "Error: missing Arguments."
  echo "Script must be called as: 'script_name scenario date [temp dir]'"
  exit
fi

# loads the base database specific config to get the db_host
db_config=`find_config db.config`
if [ "$db_config" = "" ]; then
  db_config="$META_MODEL_ROOT/models/raster_met/db.config"
fi
. $db_config
export db_host

if [ ! -d "$tempdir" ]; then
  mkdir $tempdir
fi
echo "Changing to working dir: $tempdir"
cd $tempdir

MET_SCRIPT_PATH="/opt/model/model_meteorology"

#Get the components of ddate
maskExtent='/backup/meteorology/data/cbp_extent.csv'
maskExtentLayer="cbp_extent"
yr=`date -d "$ddate" +%Y`
mo=`date -d "$ddate" +%m`
da=`date -d "$ddate" +%d`
jday=`date -d "$ddate" +%j`
ymd="$yr$mo$da"

src_files=""
import_files=""

scratchdir="/tmp"
TZ="GMT"

#Get all variables from the scenario config file
datasource=`cbp get_config $scenario met datasource`
NLDAS_ROOT=`cbp get_config $scenario met NLDAS_ROOT`
MET_EXPORT_DIR=`cbp get_config $scenario met MET_EXPORT_DIR`
varkey=`cbp get_config $scenario met varkey`
maskExtent=`cbp get_config $scenario met maskExtent`
maskExtentLayer=`cbp get_config $scenario met maskExtentLayer`
extent_hydrocode=`cbp get_config $scenario met extent_hydrocode`
extent_bundle=`cbp get_config $scenario met extent_bundle`
extent_ftype=`cbp get_config $scenario met extent_ftype`
entity_type=`cbp get_config $scenario met entity_type`
tz_hr=`cbp get_config $scenario met tz_hr`
TS_BAND=`cbp get_config $scenario met TS_BAND`
dt=`cbp get_config $scenario met dt`
DB_FORCE_OVERWRITE=`cbp get_config $scenario met DB_FORCE_OVERWRITE`
# If we are going to translate to legacy format, enable this here (relevant for NLDAS2 only)
NLDAS2_GRB_TEMPLATE=`cbp get_config $scenario met NLDAS2_GRB_TEMPLATE`
NLDAS2_UPDATE_GRB=`cbp get_config $scenario met NLDAS2_UPDATE_GRB`
#base_dir="/backup/meteorology/${datasource}"
base_dir=cbp get_config $scenario met MET_DATA_BASE`
dataset="${datasource}_precip_"
final_ext="repro.gtiff"

echo "Setting timezone hour to $tz_hr"

#Declare variables used in daymet import from web services
bboxExtent=''
bboxwest=''
bboxeast=''
bboxsouth=''
bboxnorth=''

echo "Setting src and base_dir"
echo "base_dir as ${base_dir}"
src_dir="$base_dir/$yr/$jday"
echo "Looking for raster files in $base_dir/$yr/$jday"
if [ "$datasource" == "nldas2" ]; then
  base_dir="/backup/meteorology"
  src_dir="$base_dir/$yr/$jday"
  # files to import can be inferred
  if [ -e $src_dir ]; then
    src_files=`ls $src_dir/*.grb`
    # this will have a list of geotiff if the files have been processed
    # but will omit intermediates.
    import_files=`ls $src_dir/*.gtiff $final_ext`
  fi
else 
  #Set the source directory e.g. where files will live more permanantly after download and process
  if [ -e $src_dir ]; then
    #Find the files to import into the psql database via raster2psql
    import_files=`ls $src_dir/*.gtiff | grep $final_ext`
    #Find the 'source' files that were downloaded from REST to be clipped and reprojected
    src_files=`ls $src_dir/*.bil`
  fi
fi

if [ "$datasource" == "daymet" ]; then
  #Get the bounding box of the user selected mask.
  #First, get the extent output from ogrinfo
  bboxExtent=`ogrinfo $maskExtent $maskExtentLayer | grep "Extent: "`
  
  #Use grep to get only the matching pattern (-o) via perl regular expression (-P) to identify the coordinates of the bounding box.
  #This returns both the east/west coordinate or the north AND south coordinates. We can use head/tail to just get the coordinate 
  #of interest for the array below
  #For the east and west coordinates, get the first or second number that matches a literal minus sign (-) followed 
  #by at least one digit possibly followed by a literal period (.) followed by potnetially more digits
  bboxwest=`echo $bboxExtent | grep -oP "\-[0-9]+[\.]?[0-9]*" | head -1`
  bboxeast=`echo $bboxExtent | grep -oP "\-[0-9]+[\.]?[0-9]*" | tail -1`
  #North and south coordinates are slighly more complicated as they are identified below using leading white space, that we remove via a second grep call
  bboxsouth=`echo $bboxExtent | grep -oP " [0-9]+[\.]?[0-9]*" | grep -oP "([0-9]+[\.]?[0-9]*){1}" | head -1`
  bboxnorth=`echo $bboxExtent | grep -oP " [0-9]+[\.]?[0-9]*" | grep -oP "([0-9]+[\.]?[0-9]*){1}" | tail -1`
  echo "Set extent of mask via $maskExtent as $bboxnorth $bboxsouth $bboxwest $bboxeast"
fi

DAILYVARKEY=`cbp get_config $scenario met DAILYVARKEY`
HOURLYVARKEY=$varkey
FRACTIONVARKEY=`cbp get_config $scenario met FRACTIONVARKEY`
RASTER_SQL_FILE=aggregation.sql
END_DATETIME="${ddate} ${tz_hr}:00:00 UTC"

DAILY_DEFAULT=`cbp get_config $scenario met DAILY_DEFAULT`

TILE_SIZE=`cbp get_config $scenario met TILE_SIZE`

#Export variables for use in other scripts
export yr mo da jday ymd
export MET_SCRIPT_PATH src_files import_files base_dir dataset
export scratchdir TZ final_ext
export datasource MET_EXPORT_DIR varkey maskExtent maskExtentLayer
export extent_hydrocode extent_bundle extent_ftype entity_type tz_hr
export TS_BAND dt
export bboxExtent bboxwest bboxeast bboxsouth bboxnorth
export src_dir DAILYVARKEY HOURLYVARKEY FRACTIONVARKEY RASTER_SQL_FILE END_DATETIME DAILY_DEFAULT TILE_SIZE
export NLDAS_ROOT
