#!/bin/bash
# loads the args, the raster specific config and change to temp dir
amalgamate_config=`find_config amalgamate.config`
if [ "$amalgamate_config" = "" ]; then
  amalgamate_config="$META_MODEL_ROOT/models/raster_met/amalgamate/amalgamate.config"
fi
. $amalgamate_config

# This only runs if we are making a scenario into it's own varkey and migrating it to the domain converage feature
# instead of being attached to the property
if [ "$PROMOTE_DATASET" != "1" ]; then
  echo "PROMOTE_DATASET not set. Will not make dataset into feature based dataset. Exiting." 1>&2
  exit
fi


sql="UPDATE dh_timeseries_weather set featureid = foo.fid, entity_type = 'dh_feature',
  varid = foo.newvarid
FROM  (
  SELECT feat.hydroid AS fid, scen.pid AS scenariopid, avar.hydroid AS newvarid, ovar.hydroid AS oldvarid
  FROM dh_properties AS scen
  LEFT JOIN dh_properties AS model
  ON model.pid = scen.featureid
  LEFT JOIN dh_feature AS feat
  on feat.hydroid = model.featureid
  LEFT JOIN dh_variabledefinition AS avar
  on (
    avar.varkey = scen.propname
  )
  LEFT JOIN dh_variabledefinition AS ovar
  on (
    ovar.varkey = '$AMALGAMATE_VARKEY'
  )
  WHERE feat.hydrocode = '$EXTENT_HYDROCODE'
 and scen.propname = '$AMALGAMATE_SCENARIO'
) as foo
WHERE entity_type = 'dh_properties'  
  AND featureid = foo.scenariopid 
  AND varid = oldvarid
  AND foo.newvarid IS NOT NULL 
"

if [ "$segment" == "all" ]; then
  # we want to migrate all at once, which is economical, timewise
  # so we do nothing to the sql
  continue
else 
  sql="$sql AND tsendtime = $TS_END_IN"
fi
echo "Migrating data with \"echo $sql | psql -h $db_host $db_name\" " 1>&2
echo $sql | psql -h $db_host $db_name
