#!/bin/bash
if [ -z "$scenario" ]; then 
   # try to get from cmd args
   scenario=$1
   ddate=$2
   tempdir=$3
fi
export scenario ddate coverage tempdir

if [ -z "$scenario" ]; then 
  echo "Error: missing Arguments."
  echo "Script must be called as: 'script_name scenario date [temp dir]'"
  echo "Ex: amalgamate 2020-01-18 usgs_ws_01668000 auto"
  exit
fi

# Need date. Met runs on a single day basis and user must supply date.
if [ -z ${ddate+x} ]; then 
  echo "Error: missing Arguments."
  echo "Script must be called as: 'script_name scenario date [temp dir]'"
  exit
fi

# create temp dir
if [ ! -d "$tempdir" ]; then
  mkdir $tempdir
fi
echo "Changing to working dir: $tempdir"
cd $tempdir

# loads the base database specific config to get the db_host
db_config=`find_config db.config`
if [ "$db_config" = "" ]; then
  db_config="$META_MODEL_ROOT/models/raster_met/db.config"
fi
. $db_config
export db_host

# Load simulation basics (need start date and translated datasource for raster.config)
START_DATE=`cbp get_config $scenario met START_DATE`
END_DATE=`cbp get_config $scenario met END_DATE`
#Get details on the date
yr=`date -d "$ddate" +%Y`
mo=`date -d "$ddate" +%m`
da=`date -d "$ddate" +%d`
jday=`date -d "$ddate" +%j`
ymd="$yr$mo$da"

#Convert the input time to an epoch, assuming midnight EST
TS_END_IN=`date -d "${ddate} 12:00:00 UTC" +'%s'`
TS_START_IN=$((TS_END_IN-86400))

# the selected analysis model is set as a variable i
MET_SCRIPT_PATH="/opt/model/model_meteorology"

#Set some variables to describe data structure used to store ratings:
GEO_MET_MODEL=`cbp get_config $scenario met GEO_MET_MODEL`
PROMOTE_DATASET=`cbp get_config $scenario met PROMOTE_DATASET`
EXTENT_BUNDLE=`cbp get_config $scenario met extent_bundle`
EXTENT_FTYPE=`cbp get_config $scenario met extent_ftype`
EXTENT_HYDROCODE=`cbp get_config $scenario met extent_hydrocode`
ENTITY_TYPE=`cbp get_config $scenario met entity_type`
MET_MODEL_VERSION="met-1.0"
RATINGS_VARKEY=`cbp get_config $scenario met RATINGS_VARKEY`
AMALGAMATE_SCENARIO=`cbp get_config $scenario met AMALGAMATE_SCENARIO`
VARID_SQL_FILE="${tempdir}/${EXTENT_HYDROCODE}-varRast.sql"
AMALGAMATE_SQL_FILE="${tempdir}/${EXTENT_HYDROCODE}-amalgamateRast.sql"
SCENARIOS_TO_RANK=`cbp get_config $scenario met SCENARIOS_TO_RANK`
SCENARIOS_TO_RANK=`echo "${SCENARIOS_TO_RANK}" | sed -e "s/^( /'/;s/ )$/'/;s/ /','/g"`

RESAMPLE_VARKEY=`cbp get_config $scenario met RESAMPLE_VARKEY`
BACKGROUND_VARKEY=`cbp get_config $scenario met BACKGROUND_VARKEY`
AMALGAMATE_VARKEY=`cbp get_config $scenario met AMALGAMATE_VARKEY`
COVERAGE_BUNDLE=`cbp get_config $scenario met COVERAGE_BUNDLE`
COVERAGE_FTYPE=`cbp get_config $scenario met COVERAGE_FTYPE`

PROP_VAR_NAME="Met Data Varkey"

#Paths for plots
MET_EXPORT_DIR=`cbp get_config $scenario met MET_EXPORT_DIR`
VARID_PLOT_PATH="$MET_EXPORT_DIR/$scenario/plots/"
AMALGAMATE_PLOT_PATH="$MET_EXPORT_DIR/$scenario/plots/"
TEMPDIR=${tempdir}
LIMIT_PLOT="TRUE"

export START_DATE END_DATE yr mo da jday ymd
export MET_SCRIPT PATH GEO_MET_MODEL MET_SCRIPT_PATH
export EXTENT_BUNDLE EXTENT_FTYPE EXTENT_HYDROCODE ENTITY_TYPE MET_MODEL_VERSION
export RATINGS_VARKEY AMALGAMATE_SCENARIO VARID_SQL_FILE
export TS_START_IN TS_END_IN RESAMPLE_VARKEY BACKGROUND_VARKEY AMALGAMATE_VARKEY
export COVERAGE_BUNDLE COVERAGE_FTYPE PROP_VAR_NAME
export MET_EXPORT_DIR VARID_PLOT_PATH AMALGAMATE_PLOT_PATH TEMPDIR LIMIT_PLOT
