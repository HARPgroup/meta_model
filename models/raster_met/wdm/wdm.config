#!/bin/bash
if [ -z "$scenario" ]; then 
   # try to get from cmd args
   scenario=$1
   coverage=$2
   tempdir=$3
fi
export scenario coverage tempdir
if [ -z "$scenario" ]; then 
  echo "Error: missing Arguments."
  echo "Script must be called as: 'script_name scenario coverage(i.e.land segment) [temp dir]'"
  echo "Ex: $0 PRISM usgs_ws_02031000"
  exit
fi
# create temp dir
if [ ! -d "$tempdir" ]; then
  mkdir $tempdir
fi
echo "Changing to working dir: $tempdir"
cd $tempdir
# loads the base database specific config to get the db_host
db_config=`find_config db.config`
if [ "$db_config" = "" ]; then
  db_config="$META_MODEL_ROOT/models/raster_met/db.config"
fi
. $db_config
export db_host


# the selected analysis model is set as a variable in the config file for the model scenario
GEO_MET_MODEL=`cbp get_config $scenario met GEO_MET_MODEL`
MET_DATA_SOURCE=`cbp get_config $scenario met MET_DATA_SOURCE` # which set of raster data to use for exports
MET_EXPORT_DIR=`cbp get_config $scenario met MET_EXPORT_DIR` # where to store this routines raw CSV files
WDM_EXPORT_DIR=`cbp get_config $scenario met WDM_EXPORT_DIR` # where to store this routines wdm formatted files
RNMAX_DATA_PATH=`cbp get_config $scenario met RNMAX_DATA_PATH` # where is the full TS list of radiation?
RNMAX_DATA_SOURCE=`cbp get_config $scenario met RNMAX_DATA_SOURCE` # where is the full TS list of radiation?
BASELINE_MET_SCENARIO=`cbp get_config $scenario met BASELINE_MET_SCENARIO`
# Load simulation basics (need start date and translated datasource for raster.config)
START_DATE=`cbp get_config $scenario met START_DATE`
# start offset gives a MOS to get the first date/hour
START_OFFSET=`cbp get_config $scenario met START_OFFSET`
END_DATE=`cbp get_config $scenario met END_DATE`
MODEL_TZ=`cbp get_config $scenario met MODEL_TZ`
# apply offsets and calculate timestamps centrally
tstime=`TZ="$TZ" date -d "$START_DATE" +'%s'`
tstime=$((tstime - START_OFFSET))
tsendtime=`TZ="$TZ" date -d "$END_DATE" +'%s'`
start_year=`date -d "$START_DATE" +%Y`
end_year=`TZ="$MODEL_TZ" date -d "$END_DATE" +%Y`
varkey=`cbp get_config $scenario met varkey`
wdm_coverage_ftype=`cbp get_config $scenario met wdm_coverage_ftype`
RESAMPLE_VARKEY=`cbp get_config $scenario met RESAMPLE_VARKEY`
DISAGGREGATE_VARKEY=`cbp get_config $scenario met DISAGGREGATE_VARKEY`
# SET UP THE directory in the model tree for this data to reside, ready for import
echo "METPRAD_SCEN='cbp get_config $scenario met METPRAD_SCEN'"
METPRAD_SCEN=`cbp get_config $scenario met METPRAD_SCEN`
oDir="$CBP_ROOT/input/unformatted/$MET_DATA_SOURCE/$scenario/$METPRAD_SCEN"
if [ "$METPRAD_SCEN" == "" ]; then
  echo "Error: You must have METPRAD_SCEN variable defined in config/control/met/${scenario}.con"
  echo "Error: You must have METPRAD_SCEN variable defined in config/control/met/${scenario}.con" >> problem
  exit
fi
MET_SCRIPT_PATH="/opt/model/model_meteorology"

#DB Files:
RASTER_SQL_FILE="${tempdir}/${coverage}-${MET_DATA_SOURCE}-all.csv.sql"
SAVE_PRECIP_SQL="$MET_EXPORT_DIR/$scenario/sql/${coverage}.sql"

# Now, construct other variables given scenario config and arguments
COVERAGE_PRECIP_FILE="$MET_EXPORT_DIR/$scenario/precip/${coverage}-${MET_DATA_SOURCE}-all.csv"
COVERAGE_WDM_CSV="$WDM_EXPORT_DIR/${scenario}/${coverage}.PRC"

export RASTER_SQL_FILE RASTER_SUM_FILE
export MET_SCRIPT_PATH MET_DATA_SOURCE MET_EXPORT_DIR GEO_MET_MODEL 
export COVERAGE_PRECIP_FILE RESAMPLE_VARKEY DISAGGREGATE_VARKEY varkey
export COVERAGE_WDM_CSV START_DATE END_DATE RNMAX_DATA_PATH
export oDir BASELINE_MET_SCENARIO MODEL_TZ START_YEAR END_YEAR
export tstime tsendtime METPRAD_SCEN SAVE_PRECIP_SQL
